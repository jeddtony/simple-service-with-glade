{"version":3,"sources":["../node_modules/@ant-design/icons-svg/es/asn/ExclamationCircleOutlined.js","../node_modules/@ant-design/icons/es/icons/ExclamationCircleOutlined.js","pages/booking/CreateBooking.js"],"names":["ExclamationCircleOutlined","props","ref","React","AntdIcon","Object","assign","icon","ExclamationCircleOutlinedSvg","displayName","Option","AntdSelect","confirm","ConfirmModal","CreateLocation","useState","moment","format","deptDate","setDeptDate","selectedVehicle","setSelectedVehicle","redirect","setRedirect","selectedTripAmount","setSelectedTripAmount","useTripByDate","data","status","vehicleResults","error","isFetching","useVehicles","vehicleData","stateData","seatResults","useSeats","seatData","isLoading","setIsLoading","Form","useForm","form","api","useApi","to","title","labelCol","span","wrapperCol","layout","initialValues","remember","onFinish","values","formData","customer_name","trip_id","vehicle_id","vehicle","seat_id","start_time","dept_time","postForm","a","createBooking","results","success","message","console","log","Swal","fire","then","value","resetFields","text","button","dangerMode","content","onOk","onCancel","label","required","name","onChange","e","showSearch","map","stat","id","amount","optionFilterProp","filterOption","input","option","children","toLowerCase","indexOf","filterSort","optionA","optionB","localeCompare","child","start_location","end_location","placeholder","type","htmlType","loading","disabled"],"mappings":"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","file":"static/js/16.ca9c144b.chunk.js","sourcesContent":["// This icon file is generated automatically.\nvar ExclamationCircleOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z\" } }, { \"tag\": \"path\", \"attrs\": { \"d\": \"M464 688a48 48 0 1096 0 48 48 0 10-96 0zm24-112h48c4.4 0 8-3.6 8-8V296c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8v272c0 4.4 3.6 8 8 8z\" } }] }, \"name\": \"exclamation-circle\", \"theme\": \"outlined\" };\nexport default ExclamationCircleOutlined;\n","// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport ExclamationCircleOutlinedSvg from \"@ant-design/icons-svg/es/asn/ExclamationCircleOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar ExclamationCircleOutlined = function ExclamationCircleOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, Object.assign({}, props, {\n    ref: ref,\n    icon: ExclamationCircleOutlinedSvg\n  }));\n};\n\nExclamationCircleOutlined.displayName = 'ExclamationCircleOutlined';\nexport default /*#__PURE__*/React.forwardRef(ExclamationCircleOutlined);","import React, {useState} from 'react';\nimport {ButtonLink, Drawer, NumberFormat, PageTitle} from '../../units';\nimport {Card, Form, Input, Button, Row, Col, DatePicker, Select as AntdSelect, Modal as ConfirmModal } from 'antd';\nimport {FormGroup, Select} from '../../units';\nimport {useApi, usePageValue} from '../../context';\nimport Swal from \"sweetalert2\";\nimport {useLocations, useVehicles, useSeats, \n        useTripByDate} from '../../hooks';\nimport moment from 'moment';\nimport {Redirect} from 'react-router-dom';\nimport { ExclamationCircleOutlined } from '@ant-design/icons';\n\nconst {Option} = AntdSelect;\n\nconst {confirm} = ConfirmModal;\n\nexport default function CreateLocation() {\n\n\n    const [deptDate, setDeptDate] = useState(moment().format('YYYY-MM-DD'));\n    const [selectedVehicle, setSelectedVehicle] = useState();\n    const [redirect, setRedirect] = useState(false);\n    const [selectedTripAmount, setSelectedTripAmount] = useState()\n    const { status, data, error, isFetching } = useTripByDate(deptDate);\n\n\n    const vehicleResults = useVehicles();\n    const vehicleData = vehicleResults.data? vehicleResults.data.data : [];\n\n    const stateData = data? data.data : [];\n    const seatResults = useSeats(selectedVehicle);\n    const seatData = seatResults.data? seatResults.data.data : [];\n\n    const [isLoading, setIsLoading] = useState(false);\n    const [form] = Form.useForm();\n    let api = useApi();\n\n    const handleTripChange = (value) => {\n        \n       stateData.map(stat => {\n            if(stat.id == value){\n                console.log(stat.amount)\n                setSelectedTripAmount(stat.amount)\n            }\n        }\n            );\n    }\n    \n    const onFinish = values => {\n        let formData = {\n            customer_name: values.customer_name,\n            trip_id: values.trip_id,\n            vehicle_id: values.vehicle,\n            seat_id: values.seat_id,\n            start_time: moment(values.dept_time).format('YYYY-MM-DD HH:mm:ss')\n        }\n\n\n        function showConfirm() {\n            confirm({\n              title: 'Make payment?',\n              icon: <ExclamationCircleOutlined />,\n              content: (<span>You are about to pay {<NumberFormat value={selectedTripAmount} />} </span>),\n              onOk() {\n               postForm();\n              },\n              onCancel() {\n                console.log('Cancel');\n              },\n            });\n          }\n\n\n        const postForm = async() => {\n            setIsLoading(true);\n            let results = await api.createBooking(formData);\n            let {success, message} = results;\n            setIsLoading(false);\n            console.log(results);\n            if(success) {\n                Swal.fire({\n                    title: `Trip created!`,\n                    // text: `You created a trip from ${values.start_location} with name ${values.end_location} !`,\n                    icon: \"success\",\n                  }).then((value) => {\n                    form.resetFields();\n                    setRedirect(true);\n                  });\n                } else {\n                  Swal.fire({\n                    title: `Error creating location!`,\n                    text: `${message}`,\n                    icon: \"warning\",\n                    button: \"Close\",\n                    dangerMode: true,\n                  });\n                }\n        }\n\n        showConfirm()\n    }\n\n    const formItemLayout = {\n        labelCol: {\n          span: 4,\n        },\n        wrapperCol: {\n          span: 14,\n        },\n      }\n\n    return (\n        <Drawer>\n            <Card>\n        {redirect && <Redirect to=\"/booking\" />}\n            <PageTitle title=\"Book a seat\" />\n\n            <Form\n        {...formItemLayout}\n        layout={\"horizontal\"}\n        form={form}\n        initialValues={{\n          remember: true,\n          layout: \"horizontal\",\n        }}\n\n        onFinish={onFinish}\n      >\n\n    <FormGroup label=\"Day of Travel\" required={true} name=\"dept_time\"> \n        <DatePicker\n      format=\"YYYY-MM-DD\"\n      onChange={(e) => setDeptDate( moment(e).format('YYYY-MM-DD'))}\n    //   showTime={{ defaultValue: moment('00:00:00', 'HH:mm:ss') }}\n    />\n        </FormGroup>\n\n          <FormGroup label=\"Select trip\" required={true} name=\"trip_id\"\n        //   onChange={(e) => setStartLocation(e.target.value)}\n          > \n         <AntdSelect \n        \n        showSearch\n        onChange={e => handleTripChange(e)}\n        optionFilterProp=\"children\"\n    filterOption={(input, option) =>\n      option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n    }\n    filterSort={(optionA, optionB) =>\n      optionA.children.toLowerCase().localeCompare(optionB.children.toLowerCase())\n    }\n        >\n            {\n                stateData && \n                stateData.map (child => (\n                    <Option value={child.id}>{child.start_location.name + ' to ' + child.end_location.name}</Option>\n                ))\n            }\n        </AntdSelect> \n        </FormGroup>\n\n        <FormGroup label=\"Customer Name\" required={true} name=\"customer_name\"> \n            <Input placeholder=\"John Doe\"/>\n        </FormGroup>\n\n        <FormGroup label=\"Vehicle\" required={true} name=\"vehicle\"> \n          <Select \n          onChange={e => setSelectedVehicle(e)}\n          >\n                {vehicleData}\n          </Select>\n        </FormGroup>\n\n        <FormGroup label=\"Available Seats\" required={true} name=\"seat_id\"> \n          <Select>\n                {seatData}\n          </Select>\n        </FormGroup>\n\n        <Row>\n            <Col span=\"4\"></Col>\n            <Col span=\"16\">\n            <Button type=\"primary\" htmlType=\"submit\" loading={isLoading}\n            disabled={isLoading}>\n          Make Payment\n        </Button>\n            </Col>\n        </Row>\n      </Form>\n            </Card>\n        </Drawer>\n    )\n}\n"],"sourceRoot":""}