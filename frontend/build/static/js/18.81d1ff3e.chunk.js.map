{"version":3,"sources":["pages/trip/CreateTrip.js"],"names":["CreateLocation","useState","startLocation","setStartLocation","useLocations","data","status","destinationResults","error","isFetching","useLocationExcept","vehicleResults","useVehicles","stateData","destinationData","isLoading","setIsLoading","Form","useForm","form","api","useApi","title","labelCol","span","wrapperCol","layout","initialValues","remember","onFinish","values","formData","start_location_id","start_location","end_location_id","end_location","vehicle_id","vehicle","amount","start_time","moment","dept_time","format","a","createTrip","results","success","message","console","log","Swal","fire","icon","then","value","resetFields","text","button","dangerMode","postForm","label","required","name","onChange","e","type","placeholder","showTime","defaultValue","htmlType","loading","disabled"],"mappings":"wVASe,SAASA,IAAkB,IAAD,EAGKC,qBAHL,mBAG9BC,EAH8B,KAGfC,EAHe,OAIOC,cAA5BC,GAJqB,EAI7BC,OAJ6B,EAIrBD,MACVE,GAL+B,EAIfC,MAJe,EAIRC,WACFC,YAAkBR,IAEvCS,EAAiBC,cAEjBC,EAAYR,EAAMA,EAAKA,KAAO,GAE9BS,GADcH,EAAeN,MAAMM,EAAeN,KAAKA,KACrCE,EAAmBF,KAAME,EAAmBF,KAAKA,KAAO,IAX3C,EAaHJ,oBAAS,GAbN,mBAa9Bc,EAb8B,KAanBC,EAbmB,OActBC,IAAKC,UAAbC,EAd8B,oBAejCC,EAAMC,cAkDV,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KAEA,kBAAC,IAAD,CAAWC,MAAM,gBAEjB,kBAAC,IAAD,iBAfe,CACnBC,SAAU,CACRC,KAAM,GAERC,WAAY,CACVD,KAAM,KAUJ,CAEJE,OAAQ,aACRP,KAAMA,EACNQ,cAAe,CACbC,UAAU,EACVF,OAAQ,cAGVG,SA9Da,SAAAC,GACb,IAAIC,EAAW,CACXC,kBAAmBF,EAAOG,eAC1BC,gBAAiBJ,EAAOK,aACxBC,WAAYN,EAAOO,QACnBC,OAAQR,EAAOQ,OACfC,WAAYC,IAAOV,EAAOW,WAAWC,OAAO,yBAGlC,uCAAG,gCAAAC,EAAA,6DACb3B,GAAa,GADA,SAEOI,EAAIwB,WAAWb,GAFtB,OAETc,EAFS,OAGRC,EAAoBD,EAApBC,QAASC,EAAWF,EAAXE,QACd/B,GAAa,GACbgC,QAAQC,IAAIJ,GACTC,EACCI,IAAKC,KAAK,CACN7B,MAAM,gBAEN8B,KAAM,YACLC,MAAK,SAACC,GACPnC,EAAKoC,iBAIPL,IAAKC,KAAK,CACR7B,MAAM,2BACNkC,KAAK,GAAD,OAAKT,GACTK,KAAM,UACNK,OAAQ,QACRC,YAAY,IArBP,2CAAH,qDA0BdC,MA6BE,kBAAC,IAAD,CAAWC,MAAM,mBAAmBC,UAAU,EAAMC,KAAK,kBAGzD,kBAAC,IAAD,CACAC,SAAU,SAACC,GAAD,OAAO7D,EAAiB6D,KAE3BnD,IAIT,kBAAC,IAAD,CAAW+C,MAAM,cAAcC,UAAU,EAAMC,KAAK,gBAClD,kBAAC,IAAD,KACOhD,IAIT,kBAAC,IAAD,CAAW8C,MAAM,eAAeC,UAAU,EAAMC,KAAK,UACnD,kBAAC,IAAD,CAAOG,KAAK,SAASC,YAAY,WAGnC,kBAAC,IAAD,CAAWN,MAAM,iBAAiBC,UAAU,EAAMC,KAAK,aACvD,kBAAC,IAAD,CACFpB,OAAO,sBACPyB,SAAU,CAAEC,aAAc5B,IAAO,WAAY,gBAI3C,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAKhB,KAAK,MACV,kBAAC,IAAD,CAAKA,KAAK,MACV,kBAAC,IAAD,CAAQyC,KAAK,UAAUI,SAAS,SAASC,QAASvD,EAClDwD,SAAUxD,GADV","file":"static/js/18.81d1ff3e.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport {ButtonLink, Drawer, PageTitle} from '../../units';\nimport {Card, Form, Input, Button, Row, Col, DatePicker } from 'antd';\nimport {FormGroup, Select} from '../../units';\nimport {useApi, usePageValue} from '../../context';\nimport Swal from \"sweetalert2\";\nimport {useLocations, useVehicles, useLocationExcept} from '../../hooks';\nimport moment from 'moment';\n\nexport default function CreateLocation() {\n\n\n    const [startLocation, setStartLocation] = useState();\n    const { status, data, error, isFetching } = useLocations();\n    const destinationResults = useLocationExcept(startLocation);\n\n    const vehicleResults = useVehicles();\n\n    const stateData = data? data.data : [];\n    const vehicleData = vehicleResults.data? vehicleResults.data.data : [];\n    const destinationData = destinationResults.data? destinationResults.data.data : [];\n\n    const [isLoading, setIsLoading] = useState(false);\n    const [form] = Form.useForm();\n    let api = useApi();\n\n    \n    const onFinish = values => {\n        let formData = {\n            start_location_id: values.start_location,\n            end_location_id: values.end_location,\n            vehicle_id: values.vehicle,\n            amount: values.amount,\n            start_time: moment(values.dept_time).format('YYYY-MM-DD HH:mm:ss')\n        }\n\n        const postForm = async() => {\n            setIsLoading(true);\n            let results = await api.createTrip(formData);\n            let {success, message} = results;\n            setIsLoading(false);\n            console.log(results);\n            if(success) {\n                Swal.fire({\n                    title: `Trip created!`,\n                    // text: `You created a trip from ${values.start_location} with name ${values.end_location} !`,\n                    icon: \"success\",\n                  }).then((value) => {\n                    form.resetFields();\n                    // setRedirect(true);\n                  });\n                } else {\n                  Swal.fire({\n                    title: `Error creating location!`,\n                    text: `${message}`,\n                    icon: \"warning\",\n                    button: \"Close\",\n                    dangerMode: true,\n                  });\n                }\n        }\n\n        postForm()\n    }\n\n    const formItemLayout = {\n        labelCol: {\n          span: 4,\n        },\n        wrapperCol: {\n          span: 14,\n        },\n      }\n\n    return (\n        <Drawer>\n            <Card>\n\n            <PageTitle title=\"Create Trip\" />\n\n            <Form\n        {...formItemLayout}\n        layout={\"horizontal\"}\n        form={form}\n        initialValues={{\n          remember: true,\n          layout: \"horizontal\",\n        }}\n\n        onFinish={onFinish}\n      >\n          <FormGroup label=\"Pick up location\" required={true} name=\"start_location\"\n        //   onChange={(e) => setStartLocation(e.target.value)}\n          > \n          <Select \n          onChange={(e) => setStartLocation(e)}\n          >\n                {stateData}\n          </Select>\n        </FormGroup>\n\n        <FormGroup label=\"Destination\" required={true} name=\"end_location\"> \n          <Select>\n                {destinationData}\n          </Select>\n        </FormGroup>\n\n        <FormGroup label=\"Cost of trip\" required={true} name=\"amount\"> \n          <Input type=\"number\" placeholder=\"10000\"/>\n        </FormGroup>\n\n        <FormGroup label=\"Departure time\" required={true} name=\"dept_time\"> \n        <DatePicker\n      format=\"YYYY-MM-DD HH:mm:ss\"\n      showTime={{ defaultValue: moment('00:00:00', 'HH:mm:ss') }}\n    />\n        </FormGroup>\n\n        <Row>\n            <Col span=\"4\"></Col>\n            <Col span=\"16\">\n            <Button type=\"primary\" htmlType=\"submit\" loading={isLoading}\n            disabled={isLoading}>\n          Create Trip\n        </Button>\n            </Col>\n        </Row>\n      </Form>\n            </Card>\n        </Drawer>\n    )\n}\n"],"sourceRoot":""}