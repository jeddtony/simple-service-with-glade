{"version":3,"sources":["context/apiContext.js","context/pageContext.js","api/Api.js","helpers/timeHelper.js","App.js","serviceWorker.js","index.js","helpers/localStorageHelper.js"],"names":["ApiContext","createContext","ApiProvider","children","useState","Api","Provider","value","useApi","context","useContext","undefined","Error","PageContext","PageProvider","isPageLoading","setPageLoading","isPageError","setPageError","isPageSuccess","setPageSuccess","messageContent","setMessage","usePageValue","apiUrl","process","headers","Accept","localStore","instance","axios","create","baseURL","timeout","processResult","response","status","console","log","success","data","message","postLogin","loginData","post","then","res","user","name","is_admin","statusCode","catch","error","register","a","results","createUser","topUpWallet","sendAirtime","sendData","updateBundle","id","patch","createBundle","createVendor","createComplaint","markAsResolved","get","createVehicle","createLocation","createTrip","createBooking","interceptors","use","origin","window","location","href","redirectToLogin","formatDate","date","moment","format","formatDateAndTime","Login","lazy","Register","CreateBooking","ViewBooking","CreateVehicle","ViewVehicles","CreateLocation","ViewLocations","CreateTrip","ViewTrips","App","basename","fallback","path","exact","component","Authenticated","token","getToken","Boolean","hostname","match","queryCache","QueryCache","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","keyWord","getLoginEmail","localStorage","getItem","setLoginEmail","email","setItem","setLoginPassword","password","getLoginPassword","setToken","setName","getName","setRole","getRole"],"mappings":"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","file":"static/js/main.9e0c4058.chunk.js","sourcesContent":["import React, {createContext, useContext, useState} from 'react';\nimport * as Api from '../api/Api';\n\nconst ApiContext = createContext();\n\nconst ApiProvider = ({children}) => {\n    const [restApi, setRestApi] = useState(Api);\n\n    return (\n        <ApiContext.Provider value={Api}>\n            {children}\n        </ApiContext.Provider>\n    )\n}\n\nconst useApi = () => {\n    const context = useContext(ApiContext);\n\n    if(context === undefined){\n        throw new Error('useApi must be used within a ApiProvider');\n    }\n\n    return context;\n}\n\nexport {ApiProvider, useApi}","import React, {createContext, useContext, useState} from 'react';\nimport PropTypes from 'prop-types';\n\nexport const PageContext = createContext();\n\nexport const PageProvider = ({children}) => {\n    const [isPageLoading, setPageLoading] = useState(false);\n    const [isPageError, setPageError] = useState(false);\n    const [isPageSuccess, setPageSuccess] = useState(false);\n    const [messageContent, setMessage] = useState('');\n\n    return (\n        <PageContext.Provider value={{isPageLoading, setPageLoading,\n            isPageError, setPageError,\n            isPageSuccess, setPageSuccess,\n            messageContent, setMessage}}\n        >\n            {children}\n        </PageContext.Provider>\n    )\n};\n\nexport const usePageValue = () => useContext(PageContext);\n\nPageProvider.propTypes = {\n    children: PropTypes.node.isRequired\n}\n\n\n","\nimport * as localStore from '../helpers/localStorageHelper'\n\nimport axios from 'axios';\n\nconst apiUrl = process.env.REACT_APP_API_URL + \"api/\";\nconst headers = {\n    Accept: \"application/json\",\n    \"Content-Type\": \"application/json\",\n    // \"Content-Type\": \"multipart/form-data\",\n    'Authorization': `Bearer ${localStore.getToken()}`\n  }\n\nconst instance = axios.create({\n    baseURL: apiUrl ,\n    timeout: 500000,\n    headers\n  });\n\n  instance.interceptors.response.use(function (response) {\n    console.log(response);\n      response = {...response, statusCode: 200};\n      return response;\n  }, function (error) {\n    console.log(error.response.status);\n    if(error.response.status === 401){\n      return redirectToLogin();\n    }\n      // console.log(error);\n    // else if (error.response.status == 422){\n    //  let  response = {message: 'Email or password already exists', status: 422, statusCode: 422};\n    //   return response\n    // }\n     else {\n      return {message: 'Cannot connect to server', status: 500, statusCode: 500}\n    }\n  });\nfunction redirectToLogin() {\n  let publicUrl = process.env.PUBLIC_URL;\n        let loginPageUrl = null;\n      \n          loginPageUrl = publicUrl + '/login';\n        \n        let origin = window.location.origin;\n        if (window.location.origin === origin + loginPageUrl) return;\n        window.location.href = loginPageUrl;\n}\n\n\nfunction processResult (response) {\n    let {status} = response;\n    console.log(response);\n    if(status === 200 || status === 201) {\n      return {success: true, data: response.data.data, message: response.data.message};\n    } else if(status === 500){\n      return {success: false, message: 'Cannot connect to the internet'}\n    } \n    // console.log(response.data.message);\n      return {success: false, message: response.message};\n   \n    \n}\n\n\nfunction postLogin(loginData) {\n\n\n    console.log(process.env.REACT_APP_API_URL);\n\n    return axios.post(apiUrl+'login', loginData)\n      .then(res=> {\n          let data = res.data.data;\n          console.log(data);\n          localStore.setToken(data['access_token']);\n\n          localStore.setName(data.user.name);\n          localStore.setRole(data.user.is_admin);\n          return {statusCode: 200, data: 'Success'}\n      }).catch(error => {\n          if(error.response) {\n            if (error.response.status === 401){\n              return {statusCode: 401, data: \"Invalid login details\"};\n            }\n             if( error.response.status == 422) {\n                 return {statusCode: 422, data: \"Email and password does not match any record\"}\n             }\n             else {\n              return {statusCode: 500, data: \"Error in internet connection\"} \n             }\n          }else {\n              console.log('an error ', error)\n              return {statusCode: 500, data: \"Error in internet connection\"}\n      }\n  \n    });\n    }\n\n    async function register(data) {\n        let results = await instance.post(apiUrl + \"register\", data);\n        // console.log(results);\n        return processResult(results);\n    }\n\n    // USER MGT\n    async function createUser (data) {\n      let results = await instance.post('users/create', data);\n      return processResult(results);\n    }\n\n    async function topUpWallet (data) {\n      let results = await instance.post('wallet/topUp', data);\n      return processResult(results);\n    }\n\n    async function sendAirtime (data) {\n      let results = await instance.post('sendAirtime', data);\n      return processResult(results);\n    }\n\n    async function sendData (data) {\n      let results = await instance.post('sendData', data);\n      return processResult(results);\n    }\n\n    async function updateBundle (data, id) {\n      let results = await instance.patch(`bundles/${id}`, data);\n      return processResult(results);\n    }\n\n    async function createBundle (data) {\n      let results = await instance.post(`bundles`, data);\n      return processResult(results);\n    }\n\n    async function createVendor (data) {\n      let results = await instance.post(`networks`, data);\n      return processResult(results);\n    }\n\n    async function createComplaint (data) {\n      let results = await instance.post(`complaint`, data);\n      return processResult(results);\n    }\n\n    async function markAsResolved (id) {\n      let results = await instance.get(`complaints/markAsResolved/${id}`);\n      return processResult(results);\n    }\n\n    //=========== VEHICLES =============\n    async function createVehicle (data) {\n      let results = await instance.post(`vehicle`, data);\n      return processResult(results);\n    }\n\n    //=========== LOCATION =============\n    async function createLocation (data) {\n      let results = await instance.post(`location`, data);\n      return processResult(results);\n    }\n\n     //=========== TRIP =============\n     async function createTrip (data) {\n      let results = await instance.post(`trip`, data);\n      return processResult(results);\n    }\n\n    //=========== BOOKING =============\n    async function createBooking (data) {\n      let results = await instance.post(`booking`, data);\n      return processResult(results);\n    }\n\n\n  export {instance, register, postLogin, createUser, topUpWallet, sendAirtime,\n  sendData, updateBundle, createBundle, createVendor, createComplaint,\nmarkAsResolved, createVehicle, createLocation, createTrip, createBooking}","import moment from 'moment';\n\nexport function getCurrentDate() {\n    return moment.now();\n}\n\nexport function formatDate(date) {\n    return moment(date).format('MMM-Do-YY');\n}\n\nexport function formatDateAndTime(date) {\n    return moment(date).format(\" MMMM Do YYYY HH:mm:ss\");\n}\n\nexport function getDuration(date) {\n    return moment(date).fromNow();\n}","import React, { Suspense, lazy, useContext } from \"react\";\nimport './App.css';\nimport {getToken} from './helpers';\nimport { BrowserRouter, Route, Switch, Redirect } from \"react-router-dom\";\nimport { getRole } from \"./helpers/localStorageHelper\";\n\n\n\n//================ USERS ==========\nconst Login = lazy(() => import(\"./pages/auth/Login\"));\nconst Register = lazy(() => import(\"./pages/auth/Register\"));\n\nconst Dashboard = lazy(() => import(\"./pages/dashboard/Dashboard\"));\nconst AdminDashboard = lazy(()=> import(\"./pages/dashboard/AdminDashbaord\"));\n\n// ========= BOOKING =================\nconst CreateBooking = lazy(() => import(\"./pages/booking/CreateBooking\"));\nconst ViewBooking = lazy(() => import(\"./pages/booking/ViewBooking\"));\n\n// ========= VEHICLE =================\nconst CreateVehicle = lazy(() => import(\"./pages/vehicle/CreateVehicle\"));\nconst ViewVehicles = lazy(() =>  import(\"./pages/vehicle/ViewVehicles\"));\n\n// =========== LOCATION ==============\nconst CreateLocation = lazy(() => import(\"./pages/location/CreateLocation\"));\nconst ViewLocations = lazy(() => import(\"./pages/location/ViewLocations\"));\n\n// =========== TRIP ==============\nconst CreateTrip = lazy(() => import(\"./pages/trip/CreateTrip\"));\nconst ViewTrips = lazy(() => import(\"./pages/trip/ViewTrip\"));\n\nfunction App() {\n  const baseUrl = process.env.PUBLIC_URL;\n\n  return (\n    <BrowserRouter basename={baseUrl}>\n     <Suspense fallback={<div>Loading...</div>}>\n     <Switch>\n       <Route path=\"/\" exact component={Login} />\n       <Route path=\"/register\" exact component={Register} />\n \n       <Route path=\"/login\" exact component={Login} />\n       <Authenticated>\n\n        <Route path=\"/booking/create\" exact component={CreateBooking} />\n\n        <Route path=\"/booking\" exact component={ViewBooking} />\n\n        <Route path=\"/vehicle/create\" exact component={CreateVehicle} />\n\n        <Route path=\"/vehicles\" exact component={ViewVehicles} />\n\n        <Route path=\"/location/create\" exact component={CreateLocation} />\n        <Route path=\"/locations\" exact component={ViewLocations} />\n\n        <Route path=\"/trip/create\" exact component={CreateTrip} />\n        <Route path=\"/trips\" exact component={ViewTrips} />\n\n        </Authenticated>\n       </Switch>\n       </Suspense>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n\nconst Authenticated = ({children}) => {\n    let token = getToken();\n\n    return(\n      <>\n      {token? (\n        <>\n        {children}\n        </>\n      ): <Login />}\n      </>\n    )\n\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {ApiProvider, PageProvider} from './context';\nimport {QueryCache, ReactQueryCacheProvider} from 'react-query';\nimport { ReactQueryDevtools } from 'react-query-devtools';\n\nconst queryCache = new QueryCache();\n\nReactDOM.render(\n  <React.StrictMode>\n      <ApiProvider>\n        <PageProvider>\n    <ReactQueryCacheProvider queryCache={queryCache}>\n  \n    <App />\n    \n    </ReactQueryCacheProvider>\n    </PageProvider>\n    </ApiProvider>\n    {/* <ReactQueryDevtools initialIsOpen /> */}\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","const keyWord = 'BOOKING_SYSTEM';\nexport const getLoginEmail = () => {\n    return localStorage.getItem(keyWord+'_LOGIN_EMAIL');\n}\n\nexport const setLoginEmail = (email) => {\n    return localStorage.setItem(keyWord+'_LOGIN_EMAIL', email);\n}\n\nexport const setLoginPassword = (password) => {\n    return localStorage.setItem(keyWord+'_LOGIN_PASSWORD', password);\n}\n\nexport const getLoginPassword = () => {\n    return localStorage.getItem(keyWord+'_LOGIN_PASSWORD');\n}\n\nexport const setToken = (token) => {\n    localStorage.setItem(keyWord+'_TOKEN', token);\n}\n\nexport const getToken = () => {\n    return localStorage.getItem(keyWord+'_TOKEN');\n}\n\nexport const setEmail = (email) => {\n    localStorage.setItem(keyWord+'_EMAIL', email);\n}\n\nexport const getEmail = () => {\n    return localStorage.getItem(keyWord+'_EMAIL');\n}\n\nexport const setName = (name) => {\n    localStorage.setItem(keyWord+'_NAME', name);\n}\n\nexport const getName = ()=> {\n    return localStorage.getItem(keyWord + '_NAME');\n}\n\nexport const setUserId = (id) => {\n    localStorage.setItem(keyWord + '_USER_ID', id);\n}\n\nexport const getUserId = ()=> {\n    return localStorage.getItem(keyWord + '_USER_ID');\n}\n\nexport const setRole = (id) => {\n    localStorage.setItem(keyWord + '_ROLE_ID', id);\n}\n\nexport const getRole = ()=> {\n    return localStorage.getItem(keyWord + '_ROLE_ID');\n}"],"sourceRoot":""}